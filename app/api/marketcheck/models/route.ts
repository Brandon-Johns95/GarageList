import { NextResponse } from "next/server"

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const make = searchParams.get("make")

    if (!make) {
      return NextResponse.json({ error: "Make parameter is required" }, { status: 400 })
    }

    // Comprehensive model database
    const modelDatabase: { [key: string]: Array<{ model: string; count: number }> } = {
      Toyota: [
        { model: "Camry", count: 2500 },
        { model: "Corolla", count: 2200 },
        { model: "RAV4", count: 2800 },
        { model: "Highlander", count: 1800 },
        { model: "Prius", count: 1500 },
        { model: "Tacoma", count: 2000 },
        { model: "4Runner", count: 1200 },
        { model: "Sienna", count: 800 },
        { model: "Avalon", count: 600 },
        { model: "C-HR", count: 400 },
        { model: "Tundra", count: 900 },
        { model: "Sequoia", count: 500 },
        { model: "Land Cruiser", count: 200 },
        { model: "Venza", count: 600 },
        { model: "GR86", count: 300 },
        { model: "Supra", count: 250 },
      ],
      Honda: [
        { model: "Civic", count: 2300 },
        { model: "Accord", count: 2100 },
        { model: "CR-V", count: 2600 },
        { model: "Pilot", count: 1400 },
        { model: "Odyssey", count: 900 },
        { model: "HR-V", count: 1100 },
        { model: "Passport", count: 700 },
        { model: "Fit", count: 500 },
        { model: "Ridgeline", count: 400 },
        { model: "Insight", count: 300 },
        { model: "Clarity", count: 200 },
      ],
      Ford: [
        { model: "F-150", count: 3500 },
        { model: "Escape", count: 1800 },
        { model: "Explorer", count: 1600 },
        { model: "Mustang", count: 1200 },
        { model: "Edge", count: 1000 },
        { model: "Expedition", count: 800 },
        { model: "Ranger", count: 1100 },
        { model: "Fusion", count: 900 },
        { model: "Bronco", count: 700 },
        { model: "EcoSport", count: 300 },
        { model: "Transit", count: 600 },
        { model: "F-250", count: 800 },
        { model: "F-350", count: 500 },
        { model: "Maverick", count: 400 },
      ],
      Chevrolet: [
        { model: "Silverado 1500", count: 3200 },
        { model: "Equinox", count: 1900 },
        { model: "Malibu", count: 1400 },
        { model: "Tahoe", count: 1100 },
        { model: "Traverse", count: 1300 },
        { model: "Camaro", count: 800 },
        { model: "Suburban", count: 600 },
        { model: "Cruze", count: 700 },
        { model: "Impala", count: 500 },
        { model: "Trax", count: 400 },
        { model: "Blazer", count: 900 },
        { model: "Colorado", count: 800 },
        { model: "Corvette", count: 300 },
        { model: "Silverado 2500", count: 600 },
      ],
      BMW: [
        { model: "3 Series", count: 1200 },
        { model: "5 Series", count: 800 },
        { model: "X3", count: 1000 },
        { model: "X5", count: 900 },
        { model: "7 Series", count: 400 },
        { model: "X1", count: 600 },
        { model: "4 Series", count: 500 },
        { model: "2 Series", count: 300 },
        { model: "X7", count: 200 },
        { model: "X2", count: 400 },
        { model: "X4", count: 350 },
        { model: "X6", count: 300 },
        { model: "8 Series", count: 150 },
        { model: "Z4", count: 200 },
      ],
      "Mercedes-Benz": [
        { model: "C-Class", count: 1100 },
        { model: "E-Class", count: 700 },
        { model: "GLE", count: 800 },
        { model: "GLC", count: 900 },
        { model: "S-Class", count: 300 },
        { model: "A-Class", count: 500 },
        { model: "GLS", count: 400 },
        { model: "CLA", count: 400 },
        { model: "GLB", count: 300 },
        { model: "GLA", count: 450 },
        { model: "CLS", count: 250 },
        { model: "G-Class", count: 200 },
        { model: "SL", count: 150 },
        { model: "AMG GT", count: 100 },
      ],
      Nissan: [
        { model: "Altima", count: 1800 },
        { model: "Rogue", count: 2000 },
        { model: "Sentra", count: 1200 },
        { model: "Pathfinder", count: 900 },
        { model: "Murano", count: 800 },
        { model: "Frontier", count: 600 },
        { model: "Maxima", count: 500 },
        { model: "Armada", count: 400 },
        { model: "Kicks", count: 300 },
        { model: "Versa", count: 700 },
        { model: "Titan", count: 350 },
        { model: "370Z", count: 200 },
        { model: "GT-R", count: 50 },
      ],
      Audi: [
        { model: "A4", count: 800 },
        { model: "Q5", count: 900 },
        { model: "A6", count: 600 },
        { model: "Q7", count: 500 },
        { model: "A3", count: 400 },
        { model: "Q3", count: 300 },
        { model: "A8", count: 200 },
        { model: "Q8", count: 150 },
        { model: "A5", count: 350 },
        { model: "TT", count: 200 },
        { model: "R8", count: 50 },
        { model: "e-tron", count: 250 },
      ],
      Lexus: [
        { model: "RX", count: 1200 },
        { model: "ES", count: 800 },
        { model: "NX", count: 600 },
        { model: "GX", count: 400 },
        { model: "IS", count: 500 },
        { model: "LX", count: 200 },
        { model: "LS", count: 150 },
        { model: "UX", count: 300 },
        { model: "GS", count: 250 },
        { model: "LC", count: 100 },
        { model: "RC", count: 150 },
      ],
      Tesla: [
        { model: "Model 3", count: 1500 },
        { model: "Model Y", count: 1200 },
        { model: "Model S", count: 800 },
        { model: "Model X", count: 500 },
        { model: "Cybertruck", count: 100 },
      ],
      Hyundai: [
        { model: "Elantra", count: 1500 },
        { model: "Tucson", count: 1800 },
        { model: "Santa Fe", count: 1200 },
        { model: "Sonata", count: 900 },
        { model: "Accent", count: 600 },
        { model: "Palisade", count: 800 },
        { model: "Kona", count: 700 },
        { model: "Venue", count: 400 },
        { model: "Genesis G90", count: 200 },
        { model: "Ioniq", count: 300 },
      ],
      Kia: [
        { model: "Forte", count: 1200 },
        { model: "Sportage", count: 1500 },
        { model: "Sorento", count: 1100 },
        { model: "Optima", count: 800 },
        { model: "Soul", count: 600 },
        { model: "Telluride", count: 900 },
        { model: "Seltos", count: 700 },
        { model: "Rio", count: 400 },
        { model: "Stinger", count: 300 },
        { model: "Niro", count: 500 },
      ],
      Jeep: [
        { model: "Wrangler", count: 2000 },
        { model: "Grand Cherokee", count: 1800 },
        { model: "Cherokee", count: 1200 },
        { model: "Compass", count: 1000 },
        { model: "Renegade", count: 800 },
        { model: "Gladiator", count: 600 },
        { model: "Grand Wagoneer", count: 300 },
        { model: "Wagoneer", count: 400 },
      ],
      Ram: [
        { model: "1500", count: 2500 },
        { model: "2500", count: 800 },
        { model: "3500", count: 500 },
        { model: "ProMaster", count: 300 },
        { model: "ProMaster City", count: 200 },
      ],
      GMC: [
        { model: "Sierra 1500", count: 2000 },
        { model: "Acadia", count: 1000 },
        { model: "Terrain", count: 800 },
        { model: "Yukon", count: 600 },
        { model: "Canyon", count: 500 },
        { model: "Sierra 2500", count: 400 },
        { model: "Savana", count: 300 },
      ],
    }

    const models = modelDatabase[make] || [
      { model: "Base Model", count: 100 },
      { model: "Premium", count: 80 },
      { model: "Sport", count: 60 },
      { model: "Limited", count: 40 },
    ]

    return NextResponse.json({
      models: models.sort((a, b) => b.count - a.count),
      fallback: true,
      message: "Using comprehensive vehicle database",
    })
  } catch (error) {
    console.error("Error in models API:", error)

    return NextResponse.json({
      models: [
        { model: "Base Model", count: 100 },
        { model: "Premium", count: 80 },
        { model: "Sport", count: 60 },
        { model: "Limited", count: 40 },
      ],
      fallback: true,
      error: "Fallback data used",
    })
  }
}
